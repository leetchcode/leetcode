class SparseVector:
    def __init__(self, nums: List[int]):
        # Store only non-zero values as (index, value) pairs
        self.nonzeros = {}
        for i, num in enumerate(nums):
            if num != 0:
                self.nonzeros[i] = num
    
    def dotProduct(self, vec: 'SparseVector') -> int:
        # Calculate dot product using only non-zero elements
        result = 0
        
        # Iterate through the smaller dictionary for efficiency
        if len(self.nonzeros) > len(vec.nonzeros):
            # Swap to ensure we iterate through the smaller dictionary
            return vec.dotProduct(self)
        
        # Calculate sum of products for matching indices
        for index, value in self.nonzeros.items():
            # If the same index exists in the other vector, multiply values
            if index in vec.nonzeros:
                result += value * vec.nonzeros[index]
        
        return result

# Your SparseVector object will be instantiated and called as such:
# v1 = SparseVector(nums1)
# v2 = SparseVector(nums2)
# ans = v1.dotProduct(v2)
