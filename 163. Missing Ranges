"""
LeetCode 163: Missing Ranges

Problem: You are given an inclusive range [lower, upper] and a sorted unique integer array nums, 
where all elements are in the inclusive range. Return the shortest sorted list of ranges that 
cover all the missing numbers exactly. That is, each number in the range [lower, upper] that is 
not in nums should be included in exactly one range.

A range [a,b] is the set of all integers from a to b (inclusive).

Example:
- Input: nums = [0,1,3,50,75], lower = 0, upper = 99
- Output: ["2","4->49","51->74","76->99"]
  Explanation: The missing ranges are: [2], [4,49], [51,74], and [76,99]

Time Complexity: O(n), where n is the length of nums
Space Complexity: O(1) extra space (not counting output)
"""

class Solution:
    def findMissingRanges(self, nums, lower, upper):
        """
        Find all missing ranges in the sorted array nums within the range [lower, upper].
        
        Args:
            nums: A sorted array of unique integers
            lower: Lower bound of the range (inclusive)
            upper: Upper bound of the range (inclusive)
            
        Returns:
            List of strings representing the missing ranges
        """
        result = []
        
        # Handle edge case: empty array
        if not nums:
            self.addRange(result, lower, upper)
            return result
        
        # Check if there's a range before the first element
        if lower < nums[0]:
            self.addRange(result, lower, nums[0] - 1)
        
        # Check for ranges between array elements
        for i in range(1, len(nums)):
            # If there's a gap between current number and previous number
            if nums[i] > nums[i-1] + 1:
                self.addRange(result, nums[i-1] + 1, nums[i] - 1)
        
        # Check if there's a range after the last element
        if upper > nums[-1]:
            self.addRange(result, nums[-1] + 1, upper)
        
        return result
    
    def addRange(self, result, start, end):
        """
        Helper function to add a range to the result list in the required format.
        
        Args:
            result: The list to append to
            start: Start of the range (inclusive)
            end: End of the range (inclusive)
        """
        if start == end:
            # Single number case
            result.append(str(start))
        else:
            # Range case: "start->end"
            result.append(f"{start}->{end}")

# Example usage:
# solution = Solution()
# print(solution.findMissingRanges([0,1,3,50,75], 0, 99))
# Output: ["2","4->49","51->74","76->99"]

# More test cases
# print(solution.findMissingRanges([], 1, 10))  # ["1->10"]
# print(solution.findMissingRanges([1,2], 1, 2))  # []
