class Solution(object):
    def findAllPeople(self, n, meetings, firstPerson):
        # Helper DFS function to spread secrets among connected people
        def dfs(p):
            visited.add(p)              # Mark current person as visited in this time slot
            knows_secret.add(p)         # Record that this person now knows the secret
            for n in graph[p]:          # Check all people meeting with current person
                if n not in visited:    # If not already visited in this DFS
                    dfs(n)              # Recursively spread secret to them
        
        # Initialize set of people who know the secret (person 0 and firstPerson)
        knows_secret = set([0, firstPerson])
        
        # Group meetings by time using defaultdict to automatically create lists
        meetings_by_time = defaultdict(list)
        for p1, p2, time in meetings:
            meetings_by_time[time].append((p1, p2))
        
        # Process meetings in chronological order
        sorted_times = sorted(meetings_by_time.keys())
        for time in sorted_times:
            # Build a graph of all people meeting at the current time
            graph = defaultdict(list)
            for p1, p2 in meetings_by_time[time]:
                # Add bidirectional edges since both people meet each other
                graph[p1].append(p2)
                graph[p2].append(p1)
            
            # Reset visited set for the current time slot
            visited = set()
            
            # For each person in meetings at this time
            for p in graph:
                # If they already know the secret, spread it to everyone connected to them
                if p in knows_secret and p not in visited:
                    dfs(p)
        
        # Return list of all people who know the secret
        return list(knows_secret)
