# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        """
        Problem: Merge Two Sorted Lists (LeetCode 21)
        
        Given the heads of two sorted linked lists list1 and list2,
        merge them into one sorted list by splicing together the nodes.
        
        Examples:
        Input: list1 = [1,2,4], list2 = [1,3,4]
        Output: [1,1,2,3,4,4]
        
        Input: list1 = [], list2 = []
        Output: []
        
        Input: list1 = [], list2 = [0]
        Output: [0]
        
        Approach 1: Iterative with Dummy Node
        Time: O(m + n), Space: O(1)
        """
        # Create a dummy node to simplify edge cases
        dummy = ListNode(0)
        current = dummy
        
        # Compare nodes and link the smaller one
        while list1 and list2:
            if list1.val <= list2.val:
                current.next = list1
                list1 = list1.next
            else:
                current.next = list2
                list2 = list2.next
            current = current.next
        
        # Attach remaining nodes (at most one list has remaining nodes)
        current.next = list1 or list2
        
        # Return the merged list (skip dummy node)
        return dummy.next


        
