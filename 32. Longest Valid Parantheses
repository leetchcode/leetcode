class Solution(object):
    def longestValidParentheses(self, s):
        """
        Find the length of the longest valid parentheses substring.
        Uses a two-pass approach: left-to-right and right-to-left.
        
        Key insight: A single pass can miss cases where there are excess opening
        parentheses, so we need a reverse pass to catch those cases.
        """
        # Initialize counters for left '(' and right ')' parentheses
        l = r = 0
        i = 0
        max_len = 0

        # First pass: left to right
        # This handles cases with excess closing parentheses
        while i < len(s):
            if s[i] == '(':
                l += 1  # Count opening parentheses
            else:
                r += 1  # Count closing parentheses

            # When counts are equal, we have a valid parentheses sequence
            if l == r:
                max_len = max(max_len, l + r)  # Update maximum length

            # If we have more closing than opening parentheses,
            # the sequence is invalid and we need to reset
            if r > l:  # Invalid condition (e.g., ")(" or "))")
                l = r = 0  # Reset counters to start fresh            

            i += 1    
        
        # Second pass: right to left
        # This handles cases where opening parentheses > closing parentheses
        # Example: "(()" - the first pass would never reset, missing valid subsequences
        l = r = 0
        i = len(s) - 1
        
        while i >= 0:
            if s[i] == '(':
                l += 1  # Count opening parentheses (going backwards)
            else:
                r += 1  # Count closing parentheses (going backwards)

            # When counts are equal, we have a valid parentheses sequence
            if l == r:
                max_len = max(max_len, l + r)  # Update maximum length

            # In reverse pass, if opening > closing, sequence is invalid
            # This catches cases like "(()" where excess opening parens prevent valid matches
            if l > r:  # Reverse condition of first pass
                l = r = 0  # Reset counters

            i -= 1

        return max_len
