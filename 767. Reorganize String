class Solution(object):
    def reorganizeString(self, s):
        """
        Rearranges characters in string s so that no two adjacent characters are the same.
        
        Args:
            s: Input string to reorganize
            
        Returns:
            Reorganized string with no adjacent duplicates, or empty string if impossible
        """
        # Count frequency of each character in the string
        counts = Counter(s)
        
        # Sort characters by their frequency in descending order
        # This ensures we place the most frequent characters first
        chars_desc = sorted(counts.keys(), key=lambda x : counts[x], reverse=True)

        # Initialize result array with empty strings
        res = ['']*len(s)

        # Starting index for character placement
        # We'll place characters at even indices first (0, 2, 4...)
        index = 0
        
        # Process each character in order of frequency
        for c in chars_desc:
            # Place each occurrence of the character
            for _ in range(counts[c]):
                # If we've reached the end of even positions, switch to odd positions
                if index >= len(s):
                    index = 1  # Start filling odd positions (1, 3, 5...)
                
                # Check if the current position is valid
                # A position is valid if it's the first position (index 0)
                # or if the previous character is different from the current one
                if index == 0 or res[index-1] != c:    
                    res[index] = c
                else:
                    # If we can't place the character without creating adjacent duplicates,
                    # then it's impossible to reorganize the string
                    return ""

                # Move to the next even position
                index += 2

        # Join the result array into a string
        return "".join(res)
