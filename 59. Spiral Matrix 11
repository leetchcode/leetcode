class Solution(object):
    def generateMatrix(self, n):
        """
        Generate an n x n matrix filled with elements from 1 to n^2 in spiral order.
        
        Args:
            n: The size of the square matrix
            
        Returns:
            An n x n matrix filled with elements in spiral order
        """
        # Initialize an n x n matrix filled with zeros
        matrix = [[0]*n for _ in range(n)]
        
        # Define the four directions for spiral traversal:
        # Right, Down, Left, Up (in this specific order)
        dirs = [(0,1), (1,0), (0,-1), (-1,0)]
        
        # Initialize position and direction
        r = 0  # Starting row
        c = 0  # Starting column
        d = 0  # Starting direction (0 = right)

        # Fill the matrix with values from 1 to n^2
        for value in range(1, n*n+1):
            # Place the current value at the current position
            matrix[r][c] = value
            
            # Calculate the next position based on current direction
            nr = r + dirs[d][0]  # Next row
            nc = c + dirs[d][1]  # Next column

            # Check if we need to change direction:
            # 1. Out of bounds OR
            # 2. The next cell is already filled (not 0)
            if not (0<=nr<n and 0<=nc<n and matrix[nr][nc] == 0):
                # Change direction (cycle through the 4 directions)
                d = (d+1) % 4
                
                # Recalculate next position with the new direction
                nr = r + dirs[d][0]
                nc = c + dirs[d][1]

            # Move to the next position
            r = nr
            c = nc

        return matrix
