# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def maxPathSum(self, root):
        # Initialize the maximum path sum to negative infinity
        self.max_sum = float('-inf')
        
        def dfs(node):
            if not node:
                return 0
            
            # Recursively calculate the maximum sum from left and right subtrees
            # We take max with 0 to ensure we don't include negative paths
            left_sum = max(0, dfs(node.left))
            right_sum = max(0, dfs(node.right))
            
            # Update the maximum path sum if the current path through this node is larger
            # This considers the path that goes through the current node and includes both sides
            current_path_sum = node.val + left_sum + right_sum
            self.max_sum = max(self.max_sum, current_path_sum)
            
            # Return the maximum sum path from this node to either its left or right child
            # This represents the maximum contribution this subtree can make to its parent
            return node.val + max(left_sum, right_sum)
        
        dfs(root)
        return self.max_sum
        
