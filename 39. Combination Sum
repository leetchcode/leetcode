
  def combinationSum(self, candidates: list[int], target: int) -> list[list[int]]:
        """
        Approach 2: Optimized with sorting for better pruning
        Sort candidates first to enable early termination
        """
        candidates.sort()  # Sort for better pruning
        result = []
        
        def backtrack(remaining_target, current_combination, start_index):
            if remaining_target == 0:
                result.append(current_combination[:])
                return
            
            for i in range(start_index, len(candidates)):
                candidate = candidates[i]
                
                # Early termination: since array is sorted, all remaining 
                # candidates will be >= current candidate
                if candidate > remaining_target:
                    break  # No need to check further candidates
                
                current_combination.append(candidate)
                backtrack(remaining_target - candidate, current_combination, i)
                current_combination.pop()
        
        backtrack(target, [], 0)
        return result
