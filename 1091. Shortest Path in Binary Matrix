class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        n = len(grid)
    
        # If start or end is blocked, return -1
        if grid[0][0] == 1 or grid[n-1][n-1] == 1:
            return -1

        # Directions for 8-way movement
        directions = [(-1, -1), (-1, 0), (-1, 1), 
                    (0, -1), (0, 1), 
                    (1, -1), (1, 0), (1, 1)]
        
        # BFS initialization
        queue = deque([(0, 0, 1)])  # (row, col, path_length)
        grid[0][0] = 1  # Mark as visited (don't forget this!)
        
        while queue:
            r, c, path_length = queue.popleft()
            
            # If we reach the bottom-right corner, return the distance
            if r == n-1 and c == n-1:
                return path_length
            
            # Explore all 8 directions
            for dr, dc in directions:
                nr, nc = r + dr, c + dc
                if 0 <= nr < n and 0 <= nc < n and grid[nr][nc] == 0:
                    queue.append((nr, nc, path_length + 1))
                    grid[nr][nc] = 1  # Mark as visited
        
        return -1  # No path found

        
