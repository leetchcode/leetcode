class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

class Solution:
    def lowestCommonAncestor(
        self,
        root: 'TreeNode',
        p: 'TreeNode',
        q: 'TreeNode',
    ) -> 'TreeNode':
        
        # Track whether nodes p and q exist in the tree
        self.seenP = False  
        self.seenQ = False

        def dfs(node, p, q) -> TreeNode:
            # Base case: if node is null, return None
            if not node:
                return None

            # Recursively search left and right subtrees
            left = dfs(node.left, p, q)
            right = dfs(node.right, p, q)

            # Check if current node matches p or q
            if node.val == p:
                self.seenP = True  # Mark that p was found
                return node        # Return this node as potential LCA
            if node.val == q:
                self.seenQ = True  # Mark that q was found
                return node        # Return this node as potential LCA
            
            # If p and q were found in different subtrees, current node is LCA
            if left and right:
                return node
            
            # Otherwise, return whichever subtree had a result (if any)
            return left if left else right

        # Perform DFS and store the result
        res = dfs(root, p, q)
        
        # Return LCA only if both p and q were found in the tree
        return res.val if self.seenP and self.seenQ else None


# Example usage:
root = TreeNode(3)
root.left = TreeNode(5)
root.left.left = TreeNode(6)
root.left.right = TreeNode(2)
root.left.right.left = TreeNode(7)
root.left.right.right = TreeNode(4)
root.right = TreeNode(1)
root.right.left = TreeNode(0)
root.right.right = TreeNode(8)
print(Solution().lowestCommonAncestor(root, 5, 4))  # Returns 4
