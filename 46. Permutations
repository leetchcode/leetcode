def permute(self, nums: list[int]) -> list[list[int]]:
        """
        Optimized Backtracking with Used Array
        Avoids the 'num not in current_permutation' check which is O(n)
        Time: O(n! * n), Space: O(n! * n) + O(n)
        """
        result = []
        used = [False] * len(nums)
        
        def backtrack(current_permutation):
            if len(current_permutation) == len(nums):
                result.append(current_permutation[:])
                return
            
            for i in range(len(nums)):
                if not used[i]:
                    used[i] = True
                    current_permutation.append(nums[i])
                    backtrack(current_permutation)
                    current_permutation.pop()
                    used[i] = False
        
        backtrack([])
        return result
